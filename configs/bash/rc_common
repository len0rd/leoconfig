
# these bash things are common to both Linux and Mac installs

# QOL aliases
RED='\033[0;31m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
LIGHT_BLUE='\033[1;34m'
GREEN='\033[0;32m'
YELLOW='\033[33;1m'
PURPLE_BOLD='\033[1;35m'
LIGHT_BLUE_BOLD='\033[1;34m'
GREEN_BOLD='\033[1;32m'
NC='\033[0m' # No Color

alias ls='ls -GFhl'
alias la='ls -A'
alias l='ls -CF'
alias pssh='ps aux | grep ssh'
alias jj='java -jar'
alias clear='clear && delim'
# git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gpush='git push'
alias gpull='git pull'
alias gcheck='git checkout'
alias gremote='git config --get remote.origin.url'
alias gsub='git submodule update --init --recursive'
# prune away local copies of branches that have been merged on remote
alias gprune='git fetch -p && git branch --merged | grep -i -v -E "master|develop|main|dev" | xargs git branch -d'
alias gdiff='git diff'
# git log with one line per commit
alias glog="git log --oneline"

delim() {
    printf "${PURPLE}%*s${NC}\n" "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    printf "${RED}%*s${NC}\n" "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    printf "${PURPLE}%*s${NC}\n" "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

noconda() {
    # remove conda/anaconda from the path so you use actual python base install
    export PATH=`echo ${PATH} | awk -v RS=: -v ORS=: '/anaconda3/ {next} {print}'`
}

rosat() {
    # tell you whats up with the ros network
    echo -e "${LIGHT_BLUE}ROS_MASTER_URI=" ${ROS_MASTER_URI}
    echo -e "ROS_IP=" ${ROS_IP}
    echo -e "ROS_HOSTNAME=" ${ROS_HOSTNAME} ${NC}
}

tunnel() {
    # make ssh tunneling a little easier. Only allows one tunnel at a time - on port 8123
    if [ $1 = "kill" ]; then
        sudo kill $(ps aux | grep 'ssh -D 8123 -f -C' | awk 'NR==1{print $2}')
    else
        ssh -D 8123 -f -C -q -N $1
        ps aux | grep ssh
    fi
}

##########################
#     "TERM METHODS"
# helper terminal methods
##########################

function gconf() {
    if [ "$1" == "github" ]; then
        git config user.email "len0rd@users.noreply.github.com"
        git config user.name  "len0rd"
        echo_blue "Set git config to Github user"
    fi
}

# completion for the gconf function
__gconf() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    # add different arguments to this as a space-seperated list
    opts="github"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F __gconf gconf

# max out all cpu cores with arbitrary task. Good for tests that need to be performed under heavy load 
function burncpu() {
    numProc="$(getconf _NPROCESSORS_ONLN)"
    openssl speed -multi ${numProc}
}

# run whatevers passed in until it returns a non-zero exit code
untilfail() {
    while "$@"; do :; done
}
